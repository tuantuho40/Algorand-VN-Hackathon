// Frontend (React + TypeScript)
// src/App.tsx
import React, { useState, useEffect } from 'react';
import { WalletConnect } from '@/components/WalletConnect';
import { BookingForm } from '@/components/BookingForm';
import { MyBookings } from '@/components/MyBookings';
import { HotelInfo } from '@/components/HotelInfo';
import { algodClient } from './utils/algorand';

const App: React.FC = () => {
  const [account, setAccount] = useState<string | null>(null);
  const [hotelInfo, setHotelInfo] = useState<any>(null);

  useEffect(() => {
    // Load hotel information
    const loadHotelInfo = async () => {
      try {
        const appInfo = await algodClient.getApplicationByID(APP_ID).do();
        setHotelInfo(appInfo);
      } catch (error) {
        console.error('Error loading hotel info:', error);
      }
    };

    loadHotelInfo();
  }, []);

  return (
    <div className="min-h-screen bg-gray-100">
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex justify-between items-center">
            <h1 className="text-xl font-bold">Algorand Hotel Booking</h1>
            <WalletConnect onConnect={setAccount} />
          </div>
        </div>
      </nav>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {hotelInfo && <HotelInfo info={hotelInfo} />}
        
        {account ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <BookingForm account={account} />
            <MyBookings account={account} />
          </div>
        ) : (
          <div className="text-center py-12">
            <h2 className="text-2xl font-semibold text-gray-900">
              Connect your wallet to make a booking
            </h2>
          </div>
        )}
      </main>
    </div>
  );
};

// src/components/WalletConnect.tsx
import React from 'react';
import MyAlgoConnect from '@randlabs/myalgo-connect';

interface WalletConnectProps {
  onConnect: (account: string) => void;
}

export const WalletConnect: React.FC<WalletConnectProps> = ({ onConnect }) => {
  const connectWallet = async () => {
    try {
      const myAlgoWallet = new MyAlgoConnect();
      const accounts = await myAlgoWallet.connect();
      
      if (accounts && accounts.length > 0) {
        onConnect(accounts[0].address);
      }
    } catch (error) {
      console.error('Error connecting wallet:', error);
    }
  };

  return (
    <button
      onClick={connectWallet}
      className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
    >
      Connect Wallet
    </button>
  );
};

// src/components/BookingForm.tsx
import React, { useState } from 'react';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";

interface BookingFormProps {
  account: string;
}

export const BookingForm: React.FC<BookingFormProps> = ({ account }) => {
  const [checkIn, setCheckIn] = useState<Date | null>(null);
  const [checkOut, setCheckOut] = useState<Date | null>(null);
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!checkIn || !checkOut) return;

    setLoading(true);
    try {
      const response = await fetch('/api/book-room', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userAddress: account,
          checkInDate: checkIn.toISOString(),
          checkOutDate: checkOut.toISOString(),
        }),
      });

      const data = await response.json();
      if (data.success) {
        alert('Booking successful!');
      } else {
        alert('Booking failed: ' + data.error);
      }
    } catch (error) {
      console.error('Error booking room:', error);
      alert('Error booking room');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow">
      <h2 className="text-xl font-semibold mb-4">Book a Room</h2>
      <form onSubmit={handleSubmit}>
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Check-in Date
          </label>
          <DatePicker
            selected={checkIn}
            onChange={setCheckIn}
            className="w-full p-2 border rounded"
            minDate={new Date()}
          />
        </div>
        
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Check-out Date
          </label>
          <DatePicker
            selected={checkOut}
            onChange={setCheckOut}
            className="w-full p-2 border rounded"
            minDate={checkIn || new Date()}
            // src/components/BookingForm.tsx (tiáº¿p theo)
          />
        </div>

        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 disabled:opacity-50"
          disabled={loading || !checkIn || !checkOut}
        >
          {loading ? 'Processing...' : 'Book Room'}
        </button>
      </form>
    </div>
  );
};

// src/components/MyBookings.tsx
import React, { useState, useEffect } from 'react';
import { algodClient } from '../utils/algorand';

interface Booking {
  id: string;
  checkIn: Date;
  checkOut: Date;
  status: string;
  roomNumber: number;
}

interface MyBookingsProps {
  account: string;
}

export const MyBookings: React.FC<MyBookingsProps> = ({ account }) => {
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchBookings = async () => {
      try {
        // Fetch user's local state from the smart contract
        const accountInfo = await algodClient.accountApplicationInformation(account, APP_ID).do();
        const userBookings = parseBookingsFromState(accountInfo);
        setBookings(userBookings);
      } catch (error) {
        console.error('Error fetching bookings:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchBookings();
  }, [account]);

  const handleCancelBooking = async (bookingId: string) => {
    try {
      const response = await fetch('/api/cancel-booking', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userAddress: account,
          bookingId: bookingId,
        }),
      });

      const data = await response.json();
      if (data.success) {
        setBookings(bookings.filter(booking => booking.id !== bookingId));
        alert('Booking cancelled successfully!');
      } else {
        alert('Failed to cancel booking: ' + data.error);
      }
    } catch (error) {
      console.error('Error cancelling booking:', error);
      alert('Error cancelling booking');
    }
  };

  if (loading) {
    return (
      <div className="bg-white p-6 rounded-lg shadow">
        <div className="animate-pulse space-y-4">
          <div className="h-4 bg-gray-200 rounded w-3/4"></div>
          <div className="h-4 bg-gray-200 rounded"></div>
          <div className="h-4 bg-gray-200 rounded"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white p-6 rounded-lg shadow">
      <h2 className="text-xl font-semibold mb-4">My Bookings</h2>
      {bookings.length === 0 ? (
        <p className="text-gray-500">No bookings found.</p>
      ) : (
        <div className="space-y-4">
          {bookings.map((booking) => (
            <div
              key={booking.id}
              className="border rounded p-4 hover:shadow-md transition-shadow"
            >
              <div className="flex justify-between items-start">
                <div>
                  <p className="font-medium">Room {booking.roomNumber}</p>
                  <p className="text-sm text-gray-600">
                    Check-in: {booking.checkIn.toLocaleDateString()}
                  </p>
                  <p className="text-sm text-gray-600">
                    Check-out: {booking.checkOut.toLocaleDateString()}
                  </p>
                  <span className={`inline-block mt-2 px-2 py-1 text-xs rounded ${
                    booking.status === 'active' ? 'bg-green-100 text-green-800' :
                    booking.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {booking.status}
                  </span>
                </div>
                {booking.status === 'pending' && (
                  <button
                    onClick={() => handleCancelBooking(booking.id)}
                    className="text-red-600 hover:text-red-800"
                  >
                    Cancel
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

// src/components/HotelInfo.tsx
import React from 'react';

interface HotelInfoProps {
  info: {
    name: string;
    totalRooms: number;
    availableRooms: number;
    pricePerNight: number;
  };
}

export const HotelInfo: React.FC<HotelInfoProps> = ({ info }) => {
  return (
    <div className="bg-white p-6 rounded-lg shadow mb-8">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div>
          <h2 className="text-xl font-bold">{info.name}</h2>
          <p className="text-gray-600">Luxury Hotel on Algorand</p>
        </div>
        <div>
          <p className="text-sm text-gray-500">Total Rooms</p>
          <p className="text-lg font-semibold">{info.totalRooms}</p>
        </div>
        <div>
          <p className="text-sm text-gray-500">Available Rooms</p>
          <p className="text-lg font-semibold">{info.availableRooms}</p>
        </div>
        <div>
          <p className="text-sm text-gray-500">Price per Night</p>
          <p className="text-lg font-semibold">{info.pricePerNight} ALGO</p>
        </div>
      </div>
    </div>
  );
};

// src/utils/algorand.ts
import algosdk from 'algosdk';

const algodServer = 'https://testnet-api.algoexplorer.io';
const algodToken = '';
const algodPort = '';

export const algodClient = new algosdk.Algodv2(algodToken, algodServer, algodPort);

export const APP_ID = process.env.REACT_APP_ALGORAND_APP_ID;

export const formatAlgoAmount = (amount: number): string => {
  return (amount / 1000000).toFixed(6);
};

// src/utils/dates.ts
export const formatDate = (date: Date): string => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

export const calculateNights = (checkIn: Date, checkOut: Date): number => {
  const diffTime = Math.abs(checkOut.getTime() - checkIn.getTime());
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
};

// src/components/RoomList.tsx
import React from 'react';

interface Room {
  id: number;
  type: string;
  price: number;
  amenities: string[];
  images: string[];
  available: boolean;
}

interface RoomListProps {
  rooms: Room[];
  onSelectRoom: (roomId: number) => void;
}

export const RoomList: React.FC<RoomListProps> = ({ rooms, onSelectRoom }) => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {rooms.map((room) => (
        <div key={room.id} className="bg-white rounded-lg shadow-md overflow-hidden">
          <div className="relative h-48">
            <img
              src={room.images[0]}
              alt={`Room ${room.id}`}
              className="w-full h-full object-cover"
            />
            {!room.available && (
              <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                <span className="text-white font-semibold">Not Available</span>
              </div>
            )}
          </div>
          <div className="p-4">
            <h3 className="text-lg font-semibold">{room.type}</h3>
            <p className="text-gray-600">{room.price} ALGO per night</p>
            <div className="mt-2">
              <h4 className="text-sm font-medium text-gray-500">Amenities:</h4>
              <ul className="mt-1 space-y-1">
                {room.amenities.map((amenity, index) => (
                  <li key={index} className="text-sm text-gray-600">
                    â¢ {amenity}
                  </li>
                ))}
              </ul>
            </div>
            <button
              onClick={() => onSelectRoom(room.id)}
              disabled={!room.available}
              className={`mt-4 w-full py-2 px-4 rounded ${
                room.available
                  ? 'bg-blue-600 text-white hover:bg-blue-700'
                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'
              }`}
            >
              {room.available ? 'Select Room' : 'Not Available'}
            </button>
          </div>
        </div>
      ))}
    </div>
  );
};

// src/components/BookingConfirmation.tsx
import React from 'react';
import { formatAlgoAmount } from '../utils/algorand';
import { formatDate, calculateNights } from '../utils/dates';

interface BookingConfirmationProps {
  booking: {
    roomId: number;
    checkIn: Date;
    checkOut: Date;
    pricePerNight: number;
  };
  onConfirm: () => void;
  onCancel: () => void;
}

export const BookingConfirmation: React.FC<BookingConfirmationProps> = ({
  booking,
  onConfirm,
  onCancel,
}) => {
  const nights = calculateNights(booking.checkIn, booking.checkOut);
  const totalPrice = booking.pricePerNight * nights;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg max-w-md w-full p-6">
        <h2 className="text-xl font-semibold mb-4">Confirm Your Booking</h2>
        <div className="space-y-4">
          <div>
            <p className="text-sm text-gray-500">Check-in</p>
            <p className="font-medium">{formatDate(booking.checkIn)}</p>
          </div>
          <div>
            <p className="text-sm text-gray-500">Check-out</p>
            <p className="font-medium">{formatDate(booking.checkOut)}</p>
          </div>
          <div>
            <p className="text-sm text-gray-500">Duration</p>
            <p className="font-medium">{nights} nights</p>
          </div>
          <div>
            <p className="text-sm text-gray-500">Price per night</p>
            <p className="font-medium">{formatAlgoAmount(booking.pricePerNight)} ALGO</p>
          </div>
          <div className="border-t pt-4">
            <p className="text-sm text-gray-500">Total Price</p>
            <p className="text-xl font-bold">{formatAlgoAmount(totalPrice)} ALGO</p>
          </div>
        </div>
        <div className="mt-6 flex space-x-4">
          <button
            onClick={onCancel}
            className="flex-1 py-2 px-4 border border-gray-300 rounded hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            onClick={onConfirm}
            className="flex-1 py-2 px-4 bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            Confirm & Pay
          </button>
        </div>
      </div>
    </div>
  );
};
